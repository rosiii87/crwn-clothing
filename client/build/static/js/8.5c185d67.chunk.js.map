{"version":3,"sources":["pages/shop/shop.component.jsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","react_redux__WEBPACK_IMPORTED_MODULE_2__","_redux_shop_shop_actions__WEBPACK_IMPORTED_MODULE_3__","_components_spinner_spinner_component__WEBPACK_IMPORTED_MODULE_4__","CollectionsOverviewContainer","lazy","e","then","bind","CollectionPageContainer","connect","dispatch","fetchCollectionsStart","_ref","match","useEffect","a","createElement","className","fallback","exact","path","concat","component"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,IAAAO,EAAAP,EAAA,IAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAOMU,EAA+BC,eAAK,kBACxCX,EAAAY,EAAA,GAAAC,KAAAb,EAAAc,KAAA,aAEIC,EAA0BJ,eAAK,kBACnCX,EAAAY,EAAA,GAAAC,KAAAb,EAAAc,KAAA,aA6BaE,sBAAQ,KAJI,SAAAC,GAAQ,MAAK,CACtCC,sBAAuB,kBAAMD,EAASC,kBAGzBF,CA1BE,SAAAG,GAAsC,IAAnCD,EAAmCC,EAAnCD,sBAAuBE,EAAYD,EAAZC,MAKzC,OAJAC,oBAAU,WACRH,KACC,CAACA,IAGFd,EAAAkB,EAAAC,cAAA,OAAKC,UAAU,aACbpB,EAAAkB,EAAAC,cAACpB,EAAA,SAAD,CAAUsB,SAAUrB,EAAAkB,EAAAC,cAACd,EAAA,EAAD,OAClBL,EAAAkB,EAAAC,cAACjB,EAAA,EAAD,CACEoB,OAAK,EACLC,KAAI,GAAAC,OAAKR,EAAMO,MACfE,UAAWnB,IAEbN,EAAAkB,EAAAC,cAACjB,EAAA,EAAD,CACEqB,KAAI,GAAAC,OAAKR,EAAMO,KAAX,kBACJE,UAAWd","file":"static/js/8.5c185d67.chunk.js","sourcesContent":["import React, { useEffect, lazy, Suspense } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\nimport Spinner from '../../components/spinner/spinner.component';\n\nconst CollectionsOverviewContainer = lazy(() =>\n  import('../../components/collections-overview/collections-overview.container')\n);\nconst CollectionPageContainer = lazy(() =>\n  import('../collection/collection.container')\n);\n\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]); // render only if fetchcollection start changes -> not to render multiple times\n\n  return (\n    <div className=\"shop-page\">\n      <Suspense fallback={<Spinner />}>\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionsOverviewContainer}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          component={CollectionPageContainer}\n        />\n      </Suspense>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n"],"sourceRoot":""}